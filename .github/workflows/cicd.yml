name: CI/CD to DigitalOcean Kubernetes

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

env:
  REGISTRY: docker.io
  IMAGE_API: ${{ secrets.DOCKERHUB_USERNAME }}/rental-api
  IMAGE_FE:  ${{ secrets.DOCKERHUB_USERNAME }}/rental-frontend

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    outputs:
      tag: ${{ steps.meta.outputs.tag }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Compute image tag
        id: meta
        run: echo "tag=${GITHUB_SHA::7}" >> $GITHUB_OUTPUT

      - name: Set up Buildx
        uses: docker/setup-buildx-action@v3

      - name: Docker Hub login
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # Backend image
      - name: Build & push API
        uses: docker/build-push-action@v6
        with:
          context: ./backend
          file: ./backend/Dockerfile
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_API }}:${{ steps.meta.outputs.tag }}
            ${{ env.REGISTRY }}/${{ env.IMAGE_API }}:latest

      # Frontend image
      - name: Build & push Frontend
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./frontend/rental-manager-ui/Dockerfile
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_FE }}:${{ steps.meta.outputs.tag }}
            ${{ env.REGISTRY }}/${{ env.IMAGE_FE }}:latest

  deploy:
    runs-on: ubuntu-latest
    needs: build-and-push
    env:
      IMAGE_TAG: ${{ needs.build-and-push.outputs.tag }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install kubectl
        uses: azure/setup-kubectl@v4
        with:
          version: 'v1.30.0'

      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DO_API_TOKEN }}

      - name: Fetch kubeconfig
        run: doctl kubernetes cluster kubeconfig save ${{ secrets.DO_CLUSTER_ID }}

      - name: Ensure namespace
        run: |
          kubectl get ns rental || kubectl create ns rental

      - name: Apply (idempotent) secrets
        run: |
          # MySQL secret
          kubectl -n rental create secret generic mysql-secret \
            --from-literal=MYSQL_ROOT_PASSWORD='${{ secrets.MYSQL_ROOT_PASSWORD }}' \
            --from-literal=MYSQL_DATABASE='RentalDB' \
            --dry-run=client -o yaml | kubectl apply -f -

          # API secrets
          kubectl -n rental create secret generic rental-api-secrets \
            --from-literal=ConnectionStrings__Default="server=mysql;port=3306;database=RentalDB;user=root;password=${{ secrets.MYSQL_ROOT_PASSWORD }}" \
            --from-literal=Jwt__Key='${{ secrets.JWT_KEY }}' \
            --from-literal=Jwt__Issuer='${{ secrets.JWT_ISSUER || 'rental-mgmt' }}' \
            --from-literal=Jwt__Audience='${{ secrets.JWT_AUDIENCE || 'rental-mgmt-clients' }}' \
            --dry-run=client -o yaml | kubectl apply -f -

      - name: Apply manifests (create/update)
        run: |
          kubectl apply -f k8s/namespace.yaml
          kubectl apply -f k8s/mysql.yaml
          kubectl apply -f k8s/api.yaml
          kubectl apply -f k8s/frontend.yaml

      - name: Update images to new tag
        run: |
          kubectl -n rental set image deployment/rental-api rental-api=${{ env.REGISTRY }}/${{ env.IMAGE_API }}:${{ env.IMAGE_TAG }}
          kubectl -n rental set image deployment/rental-frontend rental-frontend=${{ env.REGISTRY }}/${{ env.IMAGE_FE }}:${{ env.IMAGE_TAG }}

      - name: Wait for rollout
        run: |
          kubectl -n rental rollout status deployment/rental-api --timeout=300s
          kubectl -n rental rollout status deployment/rental-frontend --timeout=300s

      - name: Show service endpoints
        run: |
          echo "Frontend LB:"
          kubectl -n rental get svc rental-frontend -o wide
