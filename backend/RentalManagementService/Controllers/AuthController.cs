using Microsoft.AspNetCore.Mvc; using Microsoft.EntityFrameworkCore; using Microsoft.IdentityModel.Tokens; using System.IdentityModel.Tokens.Jwt; using System.Security.Claims; using System.Text; using RentalManagementService.Data; using RentalManagementService.Models; 
namespace RentalManagementService.Controllers { [ApiController][Route("api/[controller]")] public class AuthController: ControllerBase { private readonly ApplicationDbContext _db; private readonly IConfiguration _cfg; public AuthController(ApplicationDbContext db, IConfiguration cfg){_db=db;_cfg=cfg;} 
[HttpPost("register")] public async Task<IActionResult> Register([FromBody] RegisterDto dto){ if(await _db.Users.AnyAsync(u=>u.Email==dto.Email)) return BadRequest("Email exists"); var user=new AppUser{Email=dto.Email,PasswordHash=BCrypt.Net.BCrypt.HashPassword(dto.Password),Role=dto.Role??"Admin"}; _db.Users.Add(user); await _db.SaveChangesAsync(); return Ok(new{user.Id,user.Email,user.Role}); }
[HttpPost("login")] public async Task<IActionResult> Login([FromBody] LoginDto dto){ var user=await _db.Users.FirstOrDefaultAsync(u=>u.Email==dto.Email); if(user is null || !BCrypt.Net.BCrypt.Verify(dto.Password,user.PasswordHash)) return Unauthorized(); var token=GenerateJwt(user); return Ok(new{token,role=user.Role}); }
string GenerateJwt(AppUser user){ var key=_cfg["Jwt:Key"] ?? Environment.GetEnvironmentVariable("Jwt__Key") ?? "dev-12345678901234567890123456789012"; var creds=new SigningCredentials(new SymmetricSecurityKey(Encoding.UTF8.GetBytes(key)), SecurityAlgorithms.HmacSha256); var claims=new[]{ new Claim(JwtRegisteredClaimNames.Sub,user.Email), new Claim(ClaimTypes.Role,user.Role)}; var token=new JwtSecurityToken( issuer:_cfg["Jwt:Issuer"] ?? Environment.GetEnvironmentVariable("Jwt__Issuer"), audience:_cfg["Jwt:Audience"] ?? Environment.GetEnvironmentVariable("Jwt__Audience"), claims:claims, expires:DateTime.UtcNow.AddMinutes(120), signingCredentials:creds ); return new JwtSecurityTokenHandler().WriteToken(token);} }
public record RegisterDto(string Email,string Password,string? Role); public record LoginDto(string Email,string Password); }